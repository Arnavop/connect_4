{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//>md\n# Connect Four Game in JavaScript with Voice Control\n### Overview\nThis is a browser-based Connect Four game controlled via voice commands. It uses JavaScript to manage the game logic, and the Web Speech API for capturing and interpreting voice commands, providing a hands-free game experience.\n<br/>\n<br/>\n### Project Setup\nHTML: Sets up the game board and any on-screen instructions.\nCSS: Styles the game grid and tokens.\nJavaScript: Manages game logic, voice recognition, and UI updates.\n<br/>\n<br/>\n### How to Play\nPlayers speak commands to place their pieces in one of the columns on a 7x6 Connect Four board. The objective is to be the first to connect four discs in a row, either horizontally, vertically, or diagonally.\n\n",
      "status": "[1]<br><span style=\"font-size:8px\">7ms<span></span></span>",
      "output": "<h1>Connect Four Game in JavaScript with Voice Control</h1>\n<h3>Overview</h3>\n<p>This is a browser-based Connect Four game controlled via voice commands. It uses JavaScript to manage the game logic, and the Web Speech API for capturing and interpreting voice commands, providing a hands-free game experience.\n<br>\n<br></p>\n<h3>Project Setup</h3>\n<p>HTML: Sets up the game board and any on-screen instructions.\nCSS: Styles the game grid and tokens.\nJavaScript: Manages game logic, voice recognition, and UI updates.\n<br>\n<br></p>\n<h3>How to Play</h3>\n<p>Players speak commands to place their pieces in one of the columns on a 7x6 Connect Four board. The objective is to be the first to connect four discs in a row, either horizontally, vertically, or diagonally.</p>\n <br>",
      "type": "code"
    },
    {
      "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Connect 4 - Play with Friends</title>\n    <style>\n        body {\n            margin: 0;\n            font-family: 'Arial', sans-serif;\n            background-color: #0f172a;\n            min-height: 100vh;\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            width: 100%;\n        }\n\n        /* Home page styles */\n\t\t.home-page {\n\t\t  display: flex;\n\t\t  flex-direction: column;\n\t\t  align-items: center;\n\t\t  padding: 60px 20px;\n\t\t  background: linear-gradient(to bottom, rgba(15, 23, 42, 0.9), rgba(15, 23, 42, 0.95));\n\t\t  border-radius: 20px;\n\t\t  box-shadow: 0 0 50px rgba(56, 189, 248, 0.1);\n\t\t  position: relative;\n\t\t  overflow: hidden;\n\t\t}\n\n\n        .home-page::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 1px;\n            background: linear-gradient(90deg, transparent, rgba(56, 189, 248, 0.3), transparent);\n        }\n\n        .home-page h1 {\n            font-size: 4.5em;\n            margin-bottom: 30px;\n            color: #fff;\n            text-shadow: 0 0 20px rgba(56, 189, 248, 0.5);\n            font-weight: 800;\n            letter-spacing: -0.03em;\n            background: linear-gradient(to right, #fff, #38bdf8);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n        }\n\n        .home-page p {\n            font-size: 1.4em;\n            margin-bottom: 50px;\n            color: #94a3b8;\n            line-height: 1.6;\n            max-width: 600px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        .play-button {\n            padding: 20px 50px;\n            font-size: 1.5em;\n            background: linear-gradient(45deg, #22c55e, #16a34a);\n            color: white;\n            border: none;\n            border-radius: 100px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);\n            font-weight: 600;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n\n        .play-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(34, 197, 94, 0.4);\n            background: linear-gradient(45deg, #16a34a, #15803d);\n        }\n\n        .play-button:active {\n            transform: translateY(1px);\n        }\n\n        /* Game styles */\n        #gameContainer {\n            display: none;\n            justify-content: center;\n            align-items: center;\n            padding: 20px;\n        }\n\n        .game-wrapper {\n            position: relative;\n            background: rgba(30, 41, 59, 0.95);\n            padding: 30px;\n            border-radius: 20px;\n            box-shadow: 0 0 40px rgba(56, 189, 248, 0.15);\n            border: 1px solid rgba(56, 189, 248, 0.1);\n        }\n\n        #gameCanvas {\n            border: 3px solid rgba(56, 189, 248, 0.3);\n            border-radius: 15px;\n            box-shadow: 0 0 30px rgba(56, 189, 248, 0.1);\n        }\n\n        #overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(15, 23, 42, 0.95);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            border-radius: 20px;\n            backdrop-filter: blur(10px);\n        }\n\n        #gameStatus {\n            color: white;\n            font-size: 2.5em;\n            margin-bottom: 30px;\n            text-align: center;\n            font-weight: 700;\n            text-shadow: 0 0 20px rgba(56, 189, 248, 0.5);\n        }\n\n        .game-button {\n            padding: 15px 35px;\n            font-size: 1.2em;\n            background: linear-gradient(45deg, #22c55e, #16a34a);\n            color: white;\n            border: none;\n            border-radius: 100px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            margin: 8px;\n            font-weight: 600;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);\n        }\n\n        .game-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(34, 197, 94, 0.4);\n        }\n\n        .home-button {\n            background: linear-gradient(45deg, #0ea5e9, #0284c7);\n            box-shadow: 0 4px 15px rgba(14, 165, 233, 0.3);\n        }\n\n        .home-button:hover {\n            box-shadow: 0 6px 20px rgba(14, 165, 233, 0.4);\n        }\n\n        /* Player turn indicator */\n        #playerTurn {\n            text-align: center;\n            margin: 25px 0;\n            font-size: 1.6em;\n            color: #94a3b8;\n            text-shadow: 0 0 10px rgba(56, 189, 248, 0.3);\n            padding: 15px 30px;\n            border-radius: 100px;\n            background: rgba(30, 41, 59, 0.5);\n            display: inline-block;\n            position: relative;\n            backdrop-filter: blur(5px);\n        }\n\n        .player-indicator {\n            display: inline-block;\n            width: 24px;\n            height: 24px;\n            border-radius: 50%;\n            margin-left: 15px;\n            vertical-align: middle;\n            box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);\n        }\n\n        .player1 {\n            background: linear-gradient(45deg, #ef4444, #dc2626);\n        }\n\n        .player2 {\n            background: linear-gradient(45deg, #facc15, #eab308);\n        }\n\n        /* Responsive adjustments */\n        @media (max-width: 768px) {\n            .home-page h1 {\n                font-size: 3em;\n            }\n            \n            .home-page p {\n                font-size: 1.2em;\n                padding: 0 20px;\n            }\n            \n            .play-button {\n                padding: 15px 40px;\n                font-size: 1.3em;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div id=\"homePage\" class=\"home-page\">\n            <h1>Connect 4</h1>\n            <p>Challenge your friends to an exciting game of strategy and skill!</p>\n            <button class=\"play-button\" onclick=\"startGame()\">Play with Friends</button>\n\t\t\t<button class=\"play-button\" onclick=\"startGame(true)\">Play with AI</button>\n        </div>\n\n        <div id=\"gameContainer\">\n            <div class=\"game-wrapper\">\n                <canvas id=\"gameCanvas\"></canvas>\n                <div id=\"overlay\">\n                    <div id=\"gameStatus\">Connect 4</div>\n                    <div>\n                        <button class=\"game-button\" id=\"startButton\">Start Game</button>\n                        <button class=\"game-button home-button\" onclick=\"showHome()\">Home</button>\n                    </div>\n                </div>\n            </div>\n            <div id=\"playerTurn\">\n                Player 1's Turn <span class=\"player-indicator player1\"></span>\n            </div>\n        </div>\n    </div>\n    <script src=\"game.js\"></script>\n</body>\n</html>",
      "status": "",
      "output": "\n\n\n    <title>Connect 4 - Play with Friends</title>\n    <style>\n        body {\n            margin: 0;\n            font-family: 'Arial', sans-serif;\n            background-color: #0f172a;\n            min-height: 100vh;\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            width: 100%;\n        }\n\n        /* Home page styles */\n\t\t.home-page {\n\t\t  display: flex;\n\t\t  flex-direction: column;\n\t\t  align-items: center;\n\t\t  padding: 60px 20px;\n\t\t  background: linear-gradient(to bottom, rgba(15, 23, 42, 0.9), rgba(15, 23, 42, 0.95));\n\t\t  border-radius: 20px;\n\t\t  box-shadow: 0 0 50px rgba(56, 189, 248, 0.1);\n\t\t  position: relative;\n\t\t  overflow: hidden;\n\t\t}\n\n\n        .home-page::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 1px;\n            background: linear-gradient(90deg, transparent, rgba(56, 189, 248, 0.3), transparent);\n        }\n\n        .home-page h1 {\n            font-size: 4.5em;\n            margin-bottom: 30px;\n            color: #fff;\n            text-shadow: 0 0 20px rgba(56, 189, 248, 0.5);\n            font-weight: 800;\n            letter-spacing: -0.03em;\n            background: linear-gradient(to right, #fff, #38bdf8);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n        }\n\n        .home-page p {\n            font-size: 1.4em;\n            margin-bottom: 50px;\n            color: #94a3b8;\n            line-height: 1.6;\n            max-width: 600px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        .play-button {\n            padding: 20px 50px;\n            font-size: 1.5em;\n            background: linear-gradient(45deg, #22c55e, #16a34a);\n            color: white;\n            border: none;\n            border-radius: 100px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);\n            font-weight: 600;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n\n        .play-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(34, 197, 94, 0.4);\n            background: linear-gradient(45deg, #16a34a, #15803d);\n        }\n\n        .play-button:active {\n            transform: translateY(1px);\n        }\n\n        /* Game styles */\n        #gameContainer {\n            display: none;\n            justify-content: center;\n            align-items: center;\n            padding: 20px;\n        }\n\n        .game-wrapper {\n            position: relative;\n            background: rgba(30, 41, 59, 0.95);\n            padding: 30px;\n            border-radius: 20px;\n            box-shadow: 0 0 40px rgba(56, 189, 248, 0.15);\n            border: 1px solid rgba(56, 189, 248, 0.1);\n        }\n\n        #gameCanvas {\n            border: 3px solid rgba(56, 189, 248, 0.3);\n            border-radius: 15px;\n            box-shadow: 0 0 30px rgba(56, 189, 248, 0.1);\n        }\n\n        #overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(15, 23, 42, 0.95);\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            border-radius: 20px;\n            backdrop-filter: blur(10px);\n        }\n\n        #gameStatus {\n            color: white;\n            font-size: 2.5em;\n            margin-bottom: 30px;\n            text-align: center;\n            font-weight: 700;\n            text-shadow: 0 0 20px rgba(56, 189, 248, 0.5);\n        }\n\n        .game-button {\n            padding: 15px 35px;\n            font-size: 1.2em;\n            background: linear-gradient(45deg, #22c55e, #16a34a);\n            color: white;\n            border: none;\n            border-radius: 100px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            margin: 8px;\n            font-weight: 600;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);\n        }\n\n        .game-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(34, 197, 94, 0.4);\n        }\n\n        .home-button {\n            background: linear-gradient(45deg, #0ea5e9, #0284c7);\n            box-shadow: 0 4px 15px rgba(14, 165, 233, 0.3);\n        }\n\n        .home-button:hover {\n            box-shadow: 0 6px 20px rgba(14, 165, 233, 0.4);\n        }\n\n        /* Player turn indicator */\n        #playerTurn {\n            text-align: center;\n            margin: 25px 0;\n            font-size: 1.6em;\n            color: #94a3b8;\n            text-shadow: 0 0 10px rgba(56, 189, 248, 0.3);\n            padding: 15px 30px;\n            border-radius: 100px;\n            background: rgba(30, 41, 59, 0.5);\n            display: inline-block;\n            position: relative;\n            backdrop-filter: blur(5px);\n        }\n\n        .player-indicator {\n            display: inline-block;\n            width: 24px;\n            height: 24px;\n            border-radius: 50%;\n            margin-left: 15px;\n            vertical-align: middle;\n            box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);\n        }\n\n        .player1 {\n            background: linear-gradient(45deg, #ef4444, #dc2626);\n        }\n\n        .player2 {\n            background: linear-gradient(45deg, #facc15, #eab308);\n        }\n\n        /* Responsive adjustments */\n        @media (max-width: 768px) {\n            .home-page h1 {\n                font-size: 3em;\n            }\n            \n            .home-page p {\n                font-size: 1.2em;\n                padding: 0 20px;\n            }\n            \n            .play-button {\n                padding: 15px 40px;\n                font-size: 1.3em;\n            }\n        }\n    </style>\n\n\n    <div class=\"container\">\n        <div id=\"homePage\" class=\"home-page\" style=\"display: block;\">\n            <h1>Connect 4</h1>\n            <p>Challenge your friends to an exciting game of strategy and skill!</p>\n            <button class=\"play-button\" onclick=\"startGame()\">Play with Friends</button>\n\t\t\t<button class=\"play-button\" onclick=\"startGame(true)\">Play with AI</button>\n        </div>\n\n        <div id=\"gameContainer\" style=\"display: none;\">\n            <div class=\"game-wrapper\">\n                <canvas id=\"gameCanvas\" width=\"560\" height=\"480\"></canvas>\n                <div id=\"overlay\" style=\"display: flex;\">\n                    <div id=\"gameStatus\">Player 1 Wins!</div>\n                    <div>\n                        <button class=\"game-button\" id=\"startButton\">Play Again</button>\n                        <button class=\"game-button home-button\" onclick=\"showHome()\">Home</button>\n                    </div>\n                </div>\n            </div>\n            <div id=\"playerTurn\">Player 1's Turn <span class=\"player-indicator player1\"></span></div>\n        </div>\n    </div>\n    <script src=\"game.js\"></script>\n\n",
      "type": "html"
    },
    {
      "code": "const canvas = document.getElementById('gameCanvas');\nconst ctx = canvas.getContext('2d');\nconst overlay = document.getElementById('overlay');\nconst startButton = document.getElementById('startButton');\nconst playerTurnDisplay = document.getElementById('playerTurn');\nlet gameStarted = false;\nlet gameOver = false;\nlet currentPlayer = 1;\nlet animatingPiece = null;\nlet playWithAI = false;\n\n// Board properties\nconst ROWS = 6;\nconst COLS = 7;\nconst CELL_SIZE = 80;\nconst PIECE_RADIUS = (CELL_SIZE / 2) - 5;\nlet board = Array(ROWS).fill().map(() => Array(COLS).fill(0));\n\n// Initialize canvas size\ncanvas.width = COLS * CELL_SIZE;\ncanvas.height = ROWS * CELL_SIZE;\n\n// Colors\nconst BOARD_COLOR = '#0066CC';\nconst EMPTY_COLOR = '#FFFFFF';\nconst PLAYER1_COLOR = '#FF0000';\nconst PLAYER2_COLOR = '#FFDD00';\n\n// AI Constants\nconst MAX_DEPTH = 5;\nconst WINNING_VALUE = 1000000;\nconst THREAT_VALUE = 100;\n\nfunction showHome() {\n    document.getElementById('homePage').style.display = 'block';\n    document.getElementById('gameContainer').style.display = 'none';\n    resetGame();\n}\n\nfunction startGame(aiMode = false) {\n    playWithAI = aiMode;\n    document.getElementById('homePage').style.display = 'none';\n    document.getElementById('gameContainer').style.display = 'flex';\n    overlay.style.display = 'none';\n    gameStarted = true;\n    resetGame();\n}\n\nfunction updatePlayerTurn() {\n    const playerNum = currentPlayer;\n    const playerColor = playerNum === 1 ? 'player1' : 'player2';\n    playerTurnDisplay.innerHTML = `Player ${playerNum}'s Turn <span class=\"player-indicator ${playerColor}\"></span>`;\n}\n\nfunction drawBoard() {\n    ctx.fillStyle = BOARD_COLOR;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n            const x = col * CELL_SIZE + CELL_SIZE / 2;\n            const y = row * CELL_SIZE + CELL_SIZE / 2;\n            ctx.beginPath();\n            ctx.arc(x, y, PIECE_RADIUS, 0, Math.PI * 2);\n            ctx.fillStyle = board[row][col] === 0 ? EMPTY_COLOR : \n                          (board[row][col] === 1 ? PLAYER1_COLOR : PLAYER2_COLOR);\n            ctx.fill();\n            ctx.closePath();\n        }\n    }\n\n    if (animatingPiece) {\n        const { col, currentY, targetY, player } = animatingPiece;\n        const x = col * CELL_SIZE + CELL_SIZE / 2;\n        ctx.beginPath();\n        ctx.arc(x, currentY, PIECE_RADIUS, 0, Math.PI * 2);\n        ctx.fillStyle = player === 1 ? PLAYER1_COLOR : PLAYER2_COLOR;\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\nfunction checkLine(row, col, dRow, dCol, player) {\n    let count = 0;\n    let r = row;\n    let c = col;\n\n    while (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === player) {\n        count++;\n        r += dRow;\n        c += dCol;\n    }\n\n    r = row - dRow;\n    c = col - dCol;\n\n    while (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === player) {\n        count++;\n        r -= dRow;\n        c -= dCol;\n    }\n\n    return count >= 4;\n}\n\nfunction checkWin(row, col, player) {\n    // Check horizontal\n    if (checkLine(row, col, 0, 1, player)) return true;\n    // Check vertical\n    if (checkLine(row, col, 1, 0, player)) return true;\n    // Check diagonal /\n    if (checkLine(row, col, -1, 1, player)) return true;\n    // Check diagonal \\\n    if (checkLine(row, col, 1, 1, player)) return true;\n\n    return false;\n}\n\nfunction evaluateWindow(window, player) {\n    const opponent = player === 1 ? 2 : 1;\n    let score = 0;\n    const playerCount = window.filter(cell => cell === player).length;\n    const emptyCount = window.filter(cell => cell === 0).length;\n    const opponentCount = window.filter(cell => cell === opponent).length;\n\n    if (playerCount === 4) return WINNING_VALUE;\n    if (playerCount === 3 && emptyCount === 1) score += THREAT_VALUE;\n    if (playerCount === 2 && emptyCount === 2) score += 5;\n    if (opponentCount === 3 && emptyCount === 1) score -= THREAT_VALUE;\n\n    return score;\n}\n\nfunction evaluateBoard(boardState, player) {\n    let score = 0;\n\n    // Horizontal windows\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS - 3; col++) {\n            const window = boardState[row].slice(col, col + 4);\n            score += evaluateWindow(window, player);\n        }\n    }\n\n    // Vertical windows\n    for (let row = 0; row < ROWS - 3; row++) {\n        for (let col = 0; col < COLS; col++) {\n            const window = [\n                boardState[row][col],\n                boardState[row + 1][col],\n                boardState[row + 2][col],\n                boardState[row + 3][col]\n            ];\n            score += evaluateWindow(window, player);\n        }\n    }\n\n    // Diagonal windows (/)\n    for (let row = 3; row < ROWS; row++) {\n        for (let col = 0; col < COLS - 3; col++) {\n            const window = [\n                boardState[row][col],\n                boardState[row - 1][col + 1],\n                boardState[row - 2][col + 2],\n                boardState[row - 3][col + 3]\n            ];\n            score += evaluateWindow(window, player);\n        }\n    }\n\n    // Diagonal windows (\\)\n    for (let row = 0; row < ROWS - 3; row++) {\n        for (let col = 0; col < COLS - 3; col++) {\n            const window = [\n                boardState[row][col],\n                boardState[row + 1][col + 1],\n                boardState[row + 2][col + 2],\n                boardState[row + 3][col + 3]\n            ];\n            score += evaluateWindow(window, player);\n        }\n    }\n\n    // Favor center column\n    const centerArray = boardState.map(row => row[COLS >> 1]);\n    const centerCount = centerArray.filter(cell => cell === player).length;\n    score += centerCount * 3;\n\n    return score;\n}\n\nfunction minimax(boardState, depth, alpha, beta, maximizingPlayer) {\n    const validMoves = getValidMoves(boardState);\n    const isTerminal = checkGameEnd(boardState);\n    \n    if (depth === 0 || isTerminal || validMoves.length === 0) {\n        return {\n            score: evaluateBoard(boardState, 2),\n            column: null\n        };\n    }\n\n    if (maximizingPlayer) {\n        let value = -Infinity;\n        let column = validMoves[0];\n\n        for (let col of validMoves) {\n            const row = findLowestEmptyRow(col, boardState);\n            const boardCopy = boardState.map(row => [...row]);\n            boardCopy[row][col] = 2;\n\n            const newScore = minimax(boardCopy, depth - 1, alpha, beta, false).score;\n            if (newScore > value) {\n                value = newScore;\n                column = col;\n            }\n            alpha = Math.max(alpha, value);\n            if (alpha >= beta) break;\n        }\n\n        return { score: value, column: column };\n    } else {\n        let value = Infinity;\n        let column = validMoves[0];\n\n        for (let col of validMoves) {\n            const row = findLowestEmptyRow(col, boardState);\n            const boardCopy = boardState.map(row => [...row]);\n            boardCopy[row][col] = 1;\n\n            const newScore = minimax(boardCopy, depth - 1, alpha, beta, true).score;\n            if (newScore < value) {\n                value = newScore;\n                column = col;\n            }\n            beta = Math.min(beta, value);\n            if (alpha >= beta) break;\n        }\n\n        return { score: value, column: column };\n    }\n}\n\nfunction getValidMoves(boardState) {\n    const validMoves = [];\n    for (let col = 0; col < COLS; col++) {\n        if (boardState[0][col] === 0) {\n            validMoves.push(col);\n        }\n    }\n    return validMoves;\n}\n\nfunction checkGameEnd(boardState) {\n    // Check for win\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n            if (boardState[row][col] !== 0) {\n                if (checkWin(row, col, boardState[row][col])) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    // Check for draw\n    return boardState[0].every(cell => cell !== 0);\n}\n\nfunction aiMove() {\n    const result = minimax(board, MAX_DEPTH, -Infinity, Infinity, true);\n    const col = result.column;\n    const row = findLowestEmptyRow(col);\n    \n    if (row !== -1) {\n        setTimeout(() => {\n            animatePieceFall(row, col, currentPlayer);\n        }, 500);\n    }\n}\n\nfunction animatePieceFall(row, col, player) {\n    const startY = CELL_SIZE / 2;\n    const targetY = row * CELL_SIZE + CELL_SIZE / 2;\n    const animationDuration = 500;\n    const startTime = Date.now();\n\n    animatingPiece = { col, currentY: startY, targetY, player };\n\n    function animate() {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / animationDuration, 1);\n        const easeProgress = 1 - Math.pow(1 - progress, 2);\n        animatingPiece.currentY = startY + (targetY - startY) * easeProgress;\n        drawBoard();\n\n        if (progress < 1) {\n            requestAnimationFrame(animate);\n        } else {\n            animatingPiece = null;\n            board[row][col] = player;\n            drawBoard();\n\n            if (checkWin(row, col, player)) {\n                gameOver = true;\n                overlay.style.display = \"flex\";\n                startButton.textContent = \"Play Again\";\n                document.getElementById('gameStatus').textContent = `Player ${player} Wins!`;\n                return;\n            }\n\n            if (checkDraw()) {\n                gameOver = true;\n                overlay.style.display = \"flex\";\n                startButton.textContent = \"Play Again\";\n                document.getElementById('gameStatus').textContent = \"It's a Draw!\";\n                return;\n            }\n\n            currentPlayer = currentPlayer === 1 ? 2 : 1;\n            updatePlayerTurn();\n\n            if (playWithAI && currentPlayer === 2) {\n                aiMove();\n            }\n        }\n    }\n\n    animate();\n}\n\nfunction getColumnFromX(x) {\n    return Math.floor(x / CELL_SIZE);\n}\n\nfunction findLowestEmptyRow(col, boardState = board) {\n    for (let row = ROWS - 1; row >= 0; row--) {\n        if (boardState[row][col] === 0) {\n            return row;\n        }\n    }\n    return -1;\n}\n\nfunction checkDraw() {\n    return board[0].every(cell => cell !== 0);\n}\n\nfunction resetGame() {\n    board = Array(ROWS).fill().map(() => Array(COLS).fill(0));\n    currentPlayer = 1;\n    gameOver = false;\n    animatingPiece = null;\n    updatePlayerTurn();\n    drawBoard();\n}\n\ncanvas.addEventListener('click', (event) => {\n    if (!gameStarted || gameOver || animatingPiece || (playWithAI && currentPlayer === 2)) return;\n\n    const col = getColumnFromX(event.clientX - canvas.getBoundingClientRect().left);\n    const row = findLowestEmptyRow(col);\n\n    if (row !== -1) {\n        animatePieceFall(row, col, currentPlayer);\n    }\n});\n\nstartButton.addEventListener('click', () => {\n    overlay.style.display = \"none\";\n    resetGame();\n    gameStarted = true;\n});",
      "status": "[2]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}